package com.telewave.battlecommand.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "NAVI_MSG".
*/
public class NaviMsgDao extends AbstractDao<NaviMsg, Long> {

    public static final String TABLENAME = "NAVI_MSG";

    /**
     * Properties of entity NaviMsg.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property StartAddress = new Property(1, String.class, "startAddress", false, "startAddress");
        public final static Property StartLat = new Property(2, double.class, "startLat", false, "startLat");
        public final static Property StartLon = new Property(3, double.class, "startLon", false, "startLon");
        public final static Property EndAddress = new Property(4, String.class, "endAddress", false, "endAddress");
        public final static Property EndLat = new Property(5, double.class, "endLat", false, "endLat");
        public final static Property EndLon = new Property(6, double.class, "endLon", false, "endLon");
    }


    public NaviMsgDao(DaoConfig config) {
        super(config);
    }
    
    public NaviMsgDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"NAVI_MSG\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"startAddress\" TEXT," + // 1: startAddress
                "\"startLat\" REAL NOT NULL ," + // 2: startLat
                "\"startLon\" REAL NOT NULL ," + // 3: startLon
                "\"endAddress\" TEXT," + // 4: endAddress
                "\"endLat\" REAL NOT NULL ," + // 5: endLat
                "\"endLon\" REAL NOT NULL );"); // 6: endLon
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"NAVI_MSG\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, NaviMsg entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String startAddress = entity.getStartAddress();
        if (startAddress != null) {
            stmt.bindString(2, startAddress);
        }
        stmt.bindDouble(3, entity.getStartLat());
        stmt.bindDouble(4, entity.getStartLon());
 
        String endAddress = entity.getEndAddress();
        if (endAddress != null) {
            stmt.bindString(5, endAddress);
        }
        stmt.bindDouble(6, entity.getEndLat());
        stmt.bindDouble(7, entity.getEndLon());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, NaviMsg entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String startAddress = entity.getStartAddress();
        if (startAddress != null) {
            stmt.bindString(2, startAddress);
        }
        stmt.bindDouble(3, entity.getStartLat());
        stmt.bindDouble(4, entity.getStartLon());
 
        String endAddress = entity.getEndAddress();
        if (endAddress != null) {
            stmt.bindString(5, endAddress);
        }
        stmt.bindDouble(6, entity.getEndLat());
        stmt.bindDouble(7, entity.getEndLon());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public NaviMsg readEntity(Cursor cursor, int offset) {
        NaviMsg entity = new NaviMsg( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // startAddress
            cursor.getDouble(offset + 2), // startLat
            cursor.getDouble(offset + 3), // startLon
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // endAddress
            cursor.getDouble(offset + 5), // endLat
            cursor.getDouble(offset + 6) // endLon
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, NaviMsg entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setStartAddress(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setStartLat(cursor.getDouble(offset + 2));
        entity.setStartLon(cursor.getDouble(offset + 3));
        entity.setEndAddress(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setEndLat(cursor.getDouble(offset + 5));
        entity.setEndLon(cursor.getDouble(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(NaviMsg entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(NaviMsg entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(NaviMsg entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
